//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Actions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Actions"",
    ""maps"": [
        {
            ""name"": ""Interactions"",
            ""id"": ""b7e496b7-fedb-439c-b689-83058c9d0602"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""fa2f7c46-1854-465d-a1e3-8937dba07ca2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""5c7ad31f-d452-41b7-8661-72cbd17cb218"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move All"",
                    ""type"": ""Button"",
                    ""id"": ""eef3e74c-1a13-4065-914b-d9c4578a871c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Movement"",
                    ""type"": ""Value"",
                    ""id"": ""abc3c068-d5ab-437d-8ccb-900475515a06"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e64530f-4b30-4f80-9c8d-f03aa76f8142"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67cfe0b8-b9ff-4174-9fb8-7d7dfa459d5d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b41c25dc-1cb6-4f92-9291-39108017ce72"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move All"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07d66b57-b573-4f35-869e-984322042e17"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_Select = m_Interactions.FindAction("Select", throwIfNotFound: true);
        m_Interactions_Rotate = m_Interactions.FindAction("Rotate", throwIfNotFound: true);
        m_Interactions_MoveAll = m_Interactions.FindAction("Move All", throwIfNotFound: true);
        m_Interactions_MouseMovement = m_Interactions.FindAction("Mouse Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Interactions
    private readonly InputActionMap m_Interactions;
    private IInteractionsActions m_InteractionsActionsCallbackInterface;
    private readonly InputAction m_Interactions_Select;
    private readonly InputAction m_Interactions_Rotate;
    private readonly InputAction m_Interactions_MoveAll;
    private readonly InputAction m_Interactions_MouseMovement;
    public struct InteractionsActions
    {
        private @Actions m_Wrapper;
        public InteractionsActions(@Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Interactions_Select;
        public InputAction @Rotate => m_Wrapper.m_Interactions_Rotate;
        public InputAction @MoveAll => m_Wrapper.m_Interactions_MoveAll;
        public InputAction @MouseMovement => m_Wrapper.m_Interactions_MouseMovement;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnSelect;
                @Rotate.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnRotate;
                @MoveAll.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMoveAll;
                @MoveAll.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMoveAll;
                @MoveAll.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMoveAll;
                @MouseMovement.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnMouseMovement;
            }
            m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @MoveAll.started += instance.OnMoveAll;
                @MoveAll.performed += instance.OnMoveAll;
                @MoveAll.canceled += instance.OnMoveAll;
                @MouseMovement.started += instance.OnMouseMovement;
                @MouseMovement.performed += instance.OnMouseMovement;
                @MouseMovement.canceled += instance.OnMouseMovement;
            }
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);
    public interface IInteractionsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnMoveAll(InputAction.CallbackContext context);
        void OnMouseMovement(InputAction.CallbackContext context);
    }
}
